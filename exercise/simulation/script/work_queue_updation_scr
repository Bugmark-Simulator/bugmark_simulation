#!/usr/bin/env ruby

# ----- setup -----

Dir.chdir File.expand_path(__dir__)
require_relative '../../Base/lib/dotenv'
TRIAL_DIR = dotenv_trial_dir(__dir__)

# ----- libraries -----

require_relative '../../Base/lib/exchange'
require_relative '../../Base/lib/trial_settings'
# ----- info -----

puts "EXCHANGE_DIR=#{Exchange.src_dir}"
#puts 'EXERCISE SETTINGS'
#ap TrialSettings.settings




# ----- load -----

puts 'LOADING RAILS'
Exchange.load_rails


# ----- accounts -----
puts 'Update a Work Queue Table and Issue Table for the task completed'

loop do
	# Selects the list of issues for work queue to update
	un_marked_list_sql = "Select id, issue_uuid, task from work_queues
		where updated_issue = false
		and completed < now()
		and (removed > completed OR removed IS NULL); "
	un_marked_lists = ActiveRecord::Base.connection.execute(un_marked_list_sql).to_a

	# Update Issue table J-field for issue/task completed
	updated_ids = []
	un_marked_lists.each do |i|
		updated_ids.push(i['id'])
		puts i["issue_uuid"]
		issue_update = "UPDATE issues
		SET jfields = replace(jfields::TEXT, '\"#{i["task"]}\": 0','\"#{i["task"]}\": 1')::jsonb
		WHERE uuid='#{i["issue_uuid"]}'
		;"
		#binding.pry
		ActiveRecord::Base.connection.execute(issue_update)
		task_completed = Issue.where(uuid: "#{i["issue_uuid"]}").first.jfields["skill"]
		ex_id = Issue.where(uuid: "#{i["issue_uuid"]}").first.exid
		check = true
		task_completed.each do |key, value|
			if value == 0
				check = false
			end
		end
		if check == true
			IssueCmd::Sync.new({exid: ex_id, stm_status: "closed"}).project
		end
	end
	if updated_ids.length > 0
		work_queue_update_sql = "update work_queues SET updated_issue = TRUE WHERE id IN (#{updated_ids * ","});"
		ActiveRecord::Base.connection.execute(work_queue_update_sql)
	end
	# keep the loop running after every second
	sleep 1
end
puts 'DONE'

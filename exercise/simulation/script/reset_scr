#!/usr/bin/env ruby
# SPDX-License-Identifier: MPL-2.0

# ----- setup -----

Dir.chdir File.expand_path(__dir__)
require_relative '../../Base/lib/dotenv'
TRIAL_DIR = dotenv_trial_dir(__dir__)

# ----- libraries -----

require_relative '../../Base/lib/exchange'
require_relative '../../Base/lib/trial_settings'
# ----- info -----

puts "EXCHANGE_DIR=#{Exchange.src_dir}"
#puts 'EXERCISE SETTINGS'
#ap TrialSettings.settings

# ----- load -----

puts 'LOADING RAILS'
Exchange.load_rails


# ----- Reset Everything -----
puts 'Resetting Bugmark Exchange'

sql = "TRUNCATE TABLE
  amendments
, ar_internal_metadata
, bugmtimes
, contracts
, escrows
, events
, issue_comments
, issue_new_comments
, issues
, log
, offers
, positions
, projections
, schema_migrations
, sessions
, trackers
, user_groups
, user_memberships
, users
, work_queues
RESTART IDENTITY CASCADE;"
ActiveRecord::Base.connection.execute(sql)

BugmHost.reset

# ----- Delete graph images -----
Dir.glob("#{TS.graph_file_for_webapp_public}*.png").each { |file|
  File.delete(file)
}

# get funder strategies
funder_strategies = []
Dir.glob("#{TS.bot_strategy_file_for_webapp_public}*.yml").each { |file|
  funder_strategies.push(YAML::load_file(file))
}

# create funder projects
# NOTE: This is important to ensure we have the same project names when we reset
# we need the project names for the GRAFANA dashboard definitions
numnew = TS.reset_scr["create_projects"]
treatment = 0
type = 1
bonuses = 3
maluses = 2
balance = TS.session["funder_balance"]
treatments = ["both-metrics", "market-metrics", "health-metrics", "no-metrics"]
types = ["worker", "funder"]
user_names = [""]
project_names = ["Anjou", "Bosc", "Forelle", "Seckel"]

# create new users
numnew.times do |i|
  username= SecureRandom.hex(2)
  emailaddr = username+'@example.com'
  userpassword = SecureRandom.hex(2)
  # nice user name
  if User.count < TS.usernames.count then
    TS.usernames.shuffle.each do |potential_name|
      potential_name = potential_name.gsub(/[^0-9a-zA-Z]/i, '')
      if User.where(name: potential_name).count == 0 then
        username = potential_name
        break
      end
    end
  end
  opts = {
    balance: balance,
    name: username,
    email: emailaddr,
    password: userpassword
  }
  userid = FB.create(:user, opts).user.id
  # update user jfields through sql
  skills = TS.skills["task_skills"].shuffle
  bonus_skills = skills.pop(bonuses)
  malus_skills = skills.pop(maluses)
  sql = "UPDATE users SET jfields = '{\"skill_bonus\":#{bonus_skills},
  \"skill_malus\":#{malus_skills},
  \"password\":\"#{userpassword}\",\"type\":\"#{types[type]}\",
  \"treatment\":\"#{treatments[treatment]}\",\"tracker\":\"\"}' WHERE id='#{userid}';"
  ActiveRecord::Base.connection.execute(sql).to_a

  # funders get assigned a tracker and simulation bot
  if(types[type]=='funder') then
    tracker = ""
    # find a sensible projectname
    trackername = SecureRandom.hex(2)
    if Tracker.count < TS.projectnames.count then
      if Tracker.where(name: project_names[i]).count == 0 then
        trackername = project_names[i]
      end
    end
    # generate a new tracker
    opts = {
      type: "Tracker::Test",
      name: "#{trackername}"
    }
    tracker = FB.create(:tracker, opts).tracker.uuid

    sql_json = ActiveRecord::Base.connection.quote(JSON.generate(funder_strategies.pop))
    sql = "UPDATE users SET jfields = jsonb_set(jfields, '{bot}', jsonb #{sql_json}) WHERE id='#{userid}';"
    ActiveRecord::Base.connection.execute(sql).to_a
    sql = "UPDATE users SET jfields = jsonb_set(jfields, '{tracker}', '\"#{tracker}\"') WHERE id='#{userid}';"
    ActiveRecord::Base.connection.execute(sql).to_a
  end
  puts "new user: #{username} (#{userid})"
end


puts 'DONE'

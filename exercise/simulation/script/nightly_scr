#!/usr/bin/env ruby

# ----- setup -----

Dir.chdir File.expand_path(__dir__)
require_relative '../../Base/lib/dotenv'
TRIAL_DIR = dotenv_trial_dir(__dir__)

# ----- libraries -----

require_relative '../../Base/lib/exchange'
require_relative '../../Base/lib/trial_settings'
require 'awesome_print'
require 'securerandom'
# require ./user_gen_scr_setting
require 'yaml'
require_relative "./../webapp/app_helpers"
# make function for graph1
AppHelpers.module_eval do
  module_function(:graph1)
  public :graph1
end

#require 'whenever'
# ----- info -----

puts "EXCHANGE_DIR=#{Exchange.src_dir}"
#puts 'EXERCISE SETTINGS'
#ap TrialSettings.settings

# ----- load -----

puts 'LOADING RAILS'
Exchange.load_rails

# ----- read settings -----

settings = YAML.load_file('nightly_scr_setting.yml')
settings_issue_gen = YAML.load_file('issue_gen_scr_setting.yml')
settings_skill = YAML.load_file('skill.yml')


# ----- accounts -----
puts 'Running Nightly script'

# Setting BugmTime in past
# TODO: move to a separate script, not part of the nightly logic
if settings['running_script_first_time'] == 1
  puts "set server in past for first time"
  new_val = 0
  hours = 0
  File.open("/tmp/bugm_day_jump", 'w') {|f| f.puts new_val}
  File.open("/tmp/bugm_hour_jump", 'w') {|f| f.puts hours}
  BugmTime.set_day_offset(-1 * settings['time_back_days_start'])
  counter = settings['time_back_days_start']
else
  puts "set server time to continue from last run"
  time_back_days = (Time.now.to_date - settings['closing_bugmtime'].to_date).round - 1
  BugmTime.set_day_offset(-1 * time_back_days)
  settings['days_passed_after_session'] += 1
end

# Running the loop for time and different scripts
for i in settings['days_passed_after_session']..counter

  # Change day
  STDOUT.write "\rStep 1: go past end of day                                  "
  STDOUT.flush
  BugmTime.go_past_end_of_day

  # resolve mature contracts
  STDOUT.write "\rStep 2: resolve matured contracts                           "
  STDOUT.flush
  Contract.pending_resolution.each do |contract|
       ContractCmd::Resolve.new(contract).project
  end

  # Expire expired offers
  STDOUT.write "\rStep 3: expire expired offers                               "
  STDOUT.flush
  Offer.open.expired_by_time.each do |offer|
    offer.update_attribute(:status, 'expired')
  end

  # Generate new issues
  # id =1
  # id = Issue.last.id unless Issue.last.nil?
  # Tracker.all.each do |i|
  #   settings_issue_gen['number_of_issues_tracker'].times do
  #     id = id+1
  #     opts = {
  #       stm_title: SecureRandom.hex(2),
  #       stm_tracker_uuid: i.uuid,
  #       stm_status: 'open',
  #       stm_body: ' ',
  #       exid: id
  #     }
  #     issueid = FB.create(:issue, opts).issue.id
  #     skill_array = settings_skill['skills'].sample(settings_issue_gen['number_of_skills_issue'])
  #     myhash = {"skill"=> {}}
  #     skill_array.each do |i|
  #       myhash["skill"]["#{i}"] = 0
  #     end
  #     sql = "UPDATE issues SET jfields = '#{JSON.generate(myhash)}' WHERE id='#{issueid}';"
  #     ActiveRecord::Base.connection.execute(sql).to_a
  #   end
  # end

  #Store the days passed after the last session and timestamp
  STDOUT.write "\rStep 4: store in file progress of simulation                "
  STDOUT.flush
  settings['days_passed_after_session'] =  i
  settings['closing_bugmtime'] = BugmTime.now
  settings['closing_timestamp'] = Time.now
  File.open('nightly_scr_setting.yml', 'w') {|f| f.write settings.to_yaml}

  # # Breaking the scripts
  # trap("SIGINT") { throw :ctrl_c }
  #
  # catch :ctrl_c do
  #   begin
  #     settings['days_passed_after_session'] =  settings['time_back_days'] - (Time.now.to_date - BugmTime.now.to_date).round
  #     File.open('nightly_scr_setting.yml', 'w') {|f| f.write settings.to_yaml}
  #   rescue Exception
  #     puts "Values stored"
  #   end
  # end


  STDOUT.write "\rStep 5: generate data for graphs                            "
  STDOUT.flush
  # Extracting data for graphs
  AppHelpers.graph1()

  STDOUT.write "\r                                                            "
  STDOUT.flush
  puts "current day (#{BugmTime.now}), next day in #{settings['seconds_for_day_switching']} seconds"

  # Wait time before switching day
  sleep(settings['seconds_for_day_switching'])
end

puts 'DONE'

#!/usr/bin/env ruby

require 'securerandom'
require 'iora'

# ----- command line -----

CMD = __FILE__.split("/").last
DIR = File.expand_path(ARGV[0]) if ARGV[0]
USAGE = "Usage: #{CMD} <trial_dir>"

abort USAGE if ARGV.length != 1
abort "#{USAGE}\nERROR: #{ARGV[0]} not a directory" unless File.directory?(DIR)

# ----- filepaths -----

TRIAL_DIR    = DIR
TIMESTAMP    = Time.now.strftime("%d%H%M%S")
TASKS_FILE   = "./.trial_data/quest_tasks_#{TIMESTAMP}.yml"
TERMS_FILE   = "./.trial_data/quest_terms_#{TIMESTAMP}.yml"
LCL_SETTINGS = File.expand_path(__dir__) + "/quest_settings.yml"
LCL_CODEGRPS = File.expand_path(__dir__) + "/quest_groups.txt"

puts "TRIAL DIR IS #{TRIAL_DIR}"

# ----- settings and libraries -----

puts "ESTABLISH WORDQUEST SETTINGS FOR #{TRIAL_DIR}"

Dir.chdir TRIAL_DIR
system "mkdir -p .trial_data/archive"
system "mv .trial_data/*quest* .trial_data/archive 2> /dev/null"
system "cp #{LCL_SETTINGS} #{TRIAL_DIR}/.trial_data"
system "cp #{LCL_CODEGRPS} #{TRIAL_DIR}/.trial_data"

require_relative '../../exercise/Base/lib/trial_settings'
 
CODELIST = File.readlines("#{__dir__}/quest_groups.txt").map do |line|
  line.split(",").map {|el| el.chomp.strip}
end

# ----- methods -----

def body_base(hexid)
  base = "Wordquest #{hexid.upcase}"
  "#{base}\n\n"
end

def quest_link(hexid)
  "<a target='_blank' href='http://#{TS.webapp_url}/wordquest/#{hexid}'>Wordquest #{hexid.upcase}</a>"
end

def task_body(hexid)
  instructions = <<~EOF #.gsub("\n", " ")
  Resolving the issue requires two separate codewords.

  Two codewords are associated with this issue, each assigned to one or more random users.

  The codewords must be combined to generate a solution.

  View #{quest_link(hexid)}:
  <ul>
  <li>to see if you have a codeword for this issue</li>
  <li>to combine codewords and generate a solution</li>
  </ul>

  Once the solution is posted on the issue comments, the maintainer will close the issue.
  EOF
  # noinspection RubyArgCount
  body_base(hexid) + "#{instructions}\n\n/#{hexid}"
end

def task_tag_body(hexid, _noop = {})
  task_body(hexid).gsub("\n\n", "<p></p>")
end

# ----- writers -----

def write_task
  hexid = SecureRandom.hex(3)
  File.open(TASKS_FILE, 'a') do |f|
    f.puts "- title:  Wordquest #{hexid.upcase}"
    f.puts "  labels: EXERCISE,WORDQUEST,RESOLVE_WITH_COMMENT"
    f.puts "  body:   \"#{task_tag_body(hexid, "NA")}\""
    f.puts ""
  end
end

# ----- loops -----

def write_tasks(numtasks)
  numtasks.times do
    # noinspection RubyArgCount
    write_task
    print "."
  end
  puts ""
end

def write_terms(task_file, term_file)
  tasks = YAML.load_file(task_file)
  File.open(term_file, 'w') do |f|
    f.puts "---"
    tasks.each do |task|
      cat   = task["title"].split("_").last
      hexid = Iora.hexid_for(task)
      f.puts "- price:  #{TS.settings.fetch("quest_price".to_sym, 0.50)}"
      f.puts "  volume: #{TS.settings.fetch("quest_volume".to_sym, 20)}"
      f.puts "  hexid:  #{hexid}"
      print '.'
    end
  end
  puts ''
end

# ----- execution -----

Dir.chdir TS.trial_dir
system "mkdir -p .trial_data"
system "echo --- > #{TASKS_FILE}"

puts "WRITING TASKS"
write_tasks(TS.quest_num_tasks)

puts "WRITING TASK TERMS"
# noinspection RubyArgCount
write_terms(TASKS_FILE     , TASKS_FILE.gsub("task", "term"))


#!/usr/bin/env ruby

require 'securerandom'
require 'iora'

# ----- command line -----

CMD = __FILE__.split("/").last
DIR = File.expand_path(ARGV[0])
USAGE = "Usage: #{CMD} <trial_dir>"

abort USAGE if ARGV.length != 1
abort "#{USAGE}\nERROR: #{ARGV[0]} not a directory" unless File.directory?(DIR)

# ----- filepaths -----

TRIAL_DIR       = DIR
DOC_DIR         = "Essay"
TIMESTAMP       = Time.now.strftime("%d%H%M%S")
TASKS_FILE      = "#{TRIAL_DIR}/.trial_data/essay_tasks_#{TIMESTAMP}.yml"
PAIR_TASKS_FILE = "#{TRIAL_DIR}/.trial_data/essay_pair_tasks_#{TIMESTAMP}.yml"
DATA_DIR        = File.expand_path(__dir__)
LCL_SETTINGS    = DATA_DIR + "/essay_settings.yml"

puts "TRIAL DIR IS #{TRIAL_DIR}"
puts "DOC DIR IS #{DOC_DIR}"

# ----- settings and libraries -----

puts "ESTABLISH ESSAY SETTINGS FOR #{TRIAL_DIR}"

Dir.chdir TRIAL_DIR
system "mkdir -p #{DOC_DIR}"
system "mkdir -p .trial_data/archive"
system "mv .trial_data/*essay* .trial_data/archive 2> /dev/null"
system "cp #{LCL_SETTINGS} #{TRIAL_DIR}/.trial_data"
system "echo --- > #{TASKS_FILE}"
system "echo --- > #{PAIR_TASKS_FILE}"

require_relative '../../exercise/Base/lib/trial_settings'

Dir.chdir(__dir__)
PAIR_LIST  = Dir.glob("*md").map {|file| file.split(".").first}.shuffle
TASK_LIST  = (Dir.glob("*txt").map {|file| file.split(".").first} - PAIR_LIST).shuffle

# ----- generate tasks -----

def pair_task_body(idx)
  path  = "#{DATA_DIR}/#{PAIR_LIST[idx]}.txt"
  puts path 
  text  = File.read(path)
  file  = PAIR_LIST[idx] + "_#{TIMESTAMP}.md"
  body  = text.gsub("\n\n", "<p></p>").gsub("\n", " ")
  url   = %Q[https://#{TS.repo_url}/blob/master/#{DOC_DIR}/#{file}]
  link  = %Q[<a href="#{url}">#{url}</a>]
  msg   = %Q[Make the change directly to the file and submit a pull request.]
  "#{body}<p></p>#{link}<p></p>#{msg}<p></p>/#{SecureRandom.hex(3)}"
end

def task_body(idx)
  path  = "#{DATA_DIR}/#{TASK_LIST[idx]}.txt"
  text  = File.read(path)
  body  = text.gsub("\n\n", "<p></p>").gsub("\n", " ")
  msg   = "Make the change and submit a pull request."
  "#{body}<p></p>#{msg}<p></p>/#{SecureRandom.hex(3)}"
end

# ----- writers -----

def write_pair_doc(idx)
  src = "#{DATA_DIR}/#{PAIR_LIST[idx]}.md"
  tgt = "#{TRIAL_DIR}/#{DOC_DIR}/#{PAIR_LIST[idx]}_#{TIMESTAMP}.md"
  system "cp #{src} #{tgt}"
end

def write_pair_task(idx)
  File.open(PAIR_TASKS_FILE, 'a') do |f|
    f.puts %Q[- title:  #{PAIR_LIST[idx].gsub('_', ' ')}]
    f.puts %Q[  labels: EXERCISE,ESSAY]
    f.puts %Q[  body:   #{pair_task_body(idx)}]
    f.puts %Q[]
  end
end

def write_task(idx)
  File.open(TASKS_FILE, 'a') do |f|
    f.puts %Q[- title:  #{TASK_LIST[idx].gsub("_", ' ')}]
    f.puts %Q[  labels: EXERCISE,ESSAY]
    f.puts %Q[  body:   #{task_body(idx)}]
    f.puts %Q[]
  end
end

# ----- loops -----

def write_pairs(numpairs)
  (1..numpairs).each do |idx|
    write_pair_doc(idx)
    write_pair_task(idx)
    print "."
  end
  puts ""
end

def write_tasks(numtasks)
  (1..numtasks).each do |idx|
    write_task(idx)
    print "."
  end
  puts ""
end

def write_terms(task_file)
  puts "TERMS FOR #{task_file}"
  term_file = task_file.gsub('task', 'term')
  tasks = YAML.load_file(task_file)
  File.open(term_file, 'w') do |f|
    f.puts "---"
    tasks.each do |task|
      hexid = Iora.hexid_for(task)
      f.puts "- price:  #{TS.settings.fetch("essay_price".to_sym, 1.00)}"
      f.puts "  volume: #{TS.settings.fetch("essay_volume".to_sym, 10)}"
      f.puts "  hexid:  #{hexid}"
      print '.'
    end
  end
  puts ''
end

# ----- execution -----

puts "WRITING PAIRS"
write_pairs(TS.essay_num_pairs)

puts "WRITING TASKS"
write_tasks(TS.essay_num_tasks)

puts "WRITING TASK TERMS"
write_terms(TASKS_FILE)

puts "WRITING PAIR TERMS"
write_terms(PAIR_TASKS_FILE)
